enum Status {
  OFFLINE
  ONLINE
}

enum regStatus {
  UNCOMPLETED
  COMPLETED
}

type UserFriend {
  id: ID!
  name: String
}

type UserSocial {
  id: ID
}

type UserSocials {
  google: UserSocial
  facebook: UserSocial
  github: UserSocial
}

type User {
  isAdmin: Boolean!
  id: ID!
  username: String!
  email: String!
  displayName: String
  firstName: String
  lastName: String
  gender: String
  birthday: Date
  status: Status
  createDate: Date!
  lastDate: Date!
  refreshToken: String
  regStatus: regStatus
  friends: [UserFriend]
  socials: UserSocials
}

type AuthPayload {
  token: String
  refreshToken: String
}

input RegForm {
  username: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
  birthday: Date
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  getMe: [User]
}

type Mutation {
  signIn(username: String!, password: String!): AuthPayload
  signUp(form: RegForm!): Boolean
  signUpAsyncValidation(field: String!, value: String!): Boolean
  signOut(id: ID!): User
  removeUser(id: ID!): User
}
