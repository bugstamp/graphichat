{"version":3,"sources":["webpack:///./client/components/App.js","webpack:///./client/components/ui/Spinner.js","webpack:///./client/router/index.js","webpack:///./client/reducers/index.js","webpack:///./client/actions/index.js","webpack:///./client/store/index.js","webpack:///./client/index.js","webpack:///./client/registerServiceWorker.js","webpack:///./client/styles/index.js"],"names":["module","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","_router__WEBPACK_IMPORTED_MODULE_3__","_styles__WEBPACK_IMPORTED_MODULE_4__","Wrapper","styled","div","withConfig","displayName","componentId","hot","a","createElement","theme","SpinnerWrapper","Spinner","react_default","index_es","icon","faSpinner","spin","size","Home","Loadable","loader","Promise","all","e","then","bind","loading","NotFound","Routes","Switch","Route","exact","path","component","combineReducers","rootSaga","regenerator_default","wrap","_context","prev","next","stop","_marked","this","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","reducers","composeWithDevTools","applyMiddleware","apply","run","Component","App","render","es","BrowserRouter","document","getElementById","navigator","window","addEventListener","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","GlobalStyle","createGlobalStyle","_templateObject","reset"],"mappings":"+IAAA,SAAAA,GAAA,IAAAC,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,QAAAI,EAAAJ,EAAA,QAAAK,EAAAL,EAAA,QAAAM,EAAAN,EAAA,QAOMO,EAAUC,UAAOC,IAAVC,WAAA,CAAAC,YAAA,eAAAC,YAAA,gBAAGJ,CAAH,8DAoBEK,kBAAIf,EAAJe,CAbH,WACV,OACEZ,EAAAa,EAAAC,cAACX,EAAA,cAAD,CAAeY,MAAOA,KACpBf,EAAAa,EAAAC,cAAChB,EAAA,SAAD,KACEE,EAAAa,EAAAC,cAACT,EAAA,EAAD,MACAL,EAAAa,EAAAC,cAACR,EAAD,KACEN,EAAAa,EAAAC,cAACV,EAAA,EAAD,wKCfJY,YAAiBT,QAAOC,IAAVC,WAAA,CAAAC,YAAA,0BAAAC,YAAA,gBAAGJ,CAAH,2FAiBLU,EANC,kBACdC,EAAAL,EAAAC,cAACE,EAAD,KACEE,EAAAL,EAAAC,cAACK,EAAA,EAAD,CAAiBC,KAAMC,IAAWC,MAAI,EAACC,KAAK,SCZ1CC,EAAOC,IAAS,CACpBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAA7B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,KAAAC,KAAA/B,EAAAgC,KAAA,eACdC,QAASf,IAGLgB,EAAWR,IAAS,CACxBC,OAAQ,kBAAM3B,EAAA8B,EAAA,GAAAC,KAAA/B,EAAAgC,KAAA,eACdC,QAASf,IAWIiB,IARA,kBACbhB,EAAAL,EAAAC,cAACqB,EAAA,EAAD,KACEjB,EAAAL,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IAEjCN,EAAAL,EAAAC,cAACsB,EAAA,EAAD,CAAOG,UAAWN,6KChBPO,4BAAgB,gDCAdC,GAAV,SAAUA,IAAV,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACL,OADKF,EAAAE,KAAA,EACClB,YAAI,IADL,wBAAAgB,EAAAG,SAAAC,EAAAC,MCGP,IAAMC,EAAiBC,cAEjBC,EAAc,CAClBF,GAGIG,EAAQC,sBACZC,EACAC,8BAAoBC,kBAAeC,WAAf,EAAmBN,KAGzCF,EAAeS,IAAIlB,GAEJY,ICXIO,EDWJP,ICXIO,EAUTC,IATRC,iBACE5C,EAAAL,EAAAC,cAACiD,EAAA,EAAD,CAAUV,MAAOA,GACfnC,EAAAL,EAAAC,cAACkD,EAAA,EAAD,KACE9C,EAAAL,EAAAC,cAAC8C,EAAD,QAESK,SAASC,eAAe,SCJM,kBAAmBC,WAC9DC,OAAOC,iBAAiB,OAAQ,WAE9BF,UAAUG,cACPC,SAFW,qBAGXzC,KAAK,SAAC0C,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfV,UAAUG,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,ucClC9D,IAAMC,EAAcC,4BAAHC,IACpBC,IAcI/D,YAAK,YAMAR,EAAQ","file":"app.705f19b8e0ef69853aaf.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\n\r\nimport Router from '../router';\r\nimport { GlobalStyle, theme } from '../styles';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  position: relative;\r\n`;\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Fragment>\r\n        <GlobalStyle />\r\n        <Wrapper>\r\n          <Router />\r\n        </Wrapper>\r\n      </Fragment>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default hot(module)(App);\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  && svg {\r\n    color: #000;\r\n  }\r\n`;\r\n\r\nconst Spinner = () => (\r\n  <SpinnerWrapper>\r\n    <FontAwesomeIcon icon={faSpinner} spin size=\"4x\" />\r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Loadable from 'react-loadable';\r\n\r\nimport Spinner from '../components/ui/Spinner';\r\n\r\nconst Home = Loadable({\r\n  loader: () => import('../components/common/Home'),\r\n  loading: Spinner,\r\n});\r\n\r\nconst NotFound = Loadable({\r\n  loader: () => import('../components/common/NotFound'),\r\n  loading: Spinner,\r\n});\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Home} />\r\n\r\n    <Route component={NotFound} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import { combineReducers } from 'redux-immutable';\r\n// import { createSelector } from 'reselect';\r\n// import { fromJS } from 'immutable';\r\n\r\nexport default combineReducers({});\r\n","import { all } from 'redux-saga/effects';\r\n\r\nexport default ({});\r\n\r\nexport function* rootSaga() {\r\n  yield all([]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducers from '../reducers';\r\nimport { rootSaga } from '../actions';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [\r\n  sagaMiddleware,\r\n];\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(...middlewares)),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport App from './components/App';\r\nimport store from './store';\r\n\r\nconst renderApp = (Component) => {\r\n  render(\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <Component />\r\n      </BrowserRouter>\r\n    </Provider>, document.getElementById('root'),\r\n  );\r\n};\r\n\r\nrenderApp(App);\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() { // Register the service worker\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = 'service-worker.js';\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport { size } from 'polished';\r\nimport reset from 'styled-reset';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${reset}\r\n\r\n  html,\r\n  body {\r\n    width: 100%;\r\n    min-height: 100%;\r\n  }\r\n\r\n  body {\r\n    color: #000;\r\n    background-color: #fff;\r\n    overflow-y: auto;\r\n\r\n    #root {\r\n      ${size('inherit')}\r\n      display: flex;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const theme = {};\r\n\r\n// export const getThemeHelper = (props, path) => _.get(props.theme, path);\r\n"],"sourceRoot":""}