enum Status {
  OFFLINE
  ONLINE
}

enum regStatus {
  EMAIL_UNCONFIRMED
  UNCOMPLETED
  COMPLETED
}

type Message {
  content: String!
  time: Date!
  editTime: Date
  ownerId: ID!
}

type Chat {
  userId: ID!
  messages: [Message]
}

type Social {
  google: ID!
  facebook: ID!
  github: ID!
}

type User {
  id: ID!
  username: String
  email: String!
  displayName: String
  firstName: String
  lastName: String
  gender: String
  birthday: Date
  status: Status
  createDate: Date!
  lastDate: Date!
  refreshToken: String
  regStatus: regStatus
  chats: [Chat]
  socials: Social
}

type AuthPayload {
  token: String
  refreshToken: String
}

input SignInForm {
  username: String!
  password: String!
}

input SignUpForm {
  username: String!
  email: String!
  password: String!
}

input SignUpCompletionForm {
  firstName: String!
  lastName: String!
  gender: String
  birthday: String
}

input SocialProfile {
  id: ID!
  name: String!
}

input SocialUserProfile {
  email: String!
  firstName: String!
  lastName: String!
}

type AsyncValidationResult {
  field: String!
  valid: Boolean!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  getMe: User
}

type Mutation {
  signIn(form: SignInForm!): AuthPayload
  signUp(form: SignUpForm!): Boolean
  signUpCompletion(form: SignUpCompletionForm): AuthPayload
  signUpAsyncValidation(field: String!, value: String!): AsyncValidationResult
  signInBySocial(social: SocialProfile!, profile: SocialUserProfile!): AuthPayload
  signUpBySocial(social: SocialProfile!, profile: SocialUserProfile!): AuthPayload
  signOut(id: ID!): User
  deleteUser(id: ID!): User
}
