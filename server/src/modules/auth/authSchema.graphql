type AuthPayload {
  token: String
  refreshToken: String
}

input SignInForm {
  username: String!
  password: String!
}

input SignUpForm {
  username: String!
  email: String!
  password: String!
}

input SignUpCompletionForm {
  firstName: String!
  lastName: String!
  gender: String
  birthday: String
}

input SocialProfile {
  id: ID!
  name: String!
}

input SocialUserProfile {
  email: String!
  firstName: String!
  lastName: String!
}

type AsyncValidationResult {
  field: String!
  valid: Boolean!
}

type Query {
  me: User
}

type Mutation {
  signIn(form: SignInForm!): AuthPayload
  signUp(form: SignUpForm!): Boolean
  signUpCompletion(form: SignUpCompletionForm): AuthPayload
  signUpAsyncValidation(field: String!, value: String!): AsyncValidationResult
  signInBySocial(social: SocialProfile!, profile: SocialUserProfile!): AuthPayload
  signUpBySocial(social: SocialProfile!, profile: SocialUserProfile!): AuthPayload
  signOut: User
}
