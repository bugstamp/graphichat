{"version":3,"sources":["webpack:///./src/styles/index.js","webpack:///./src/assets/images/login-bg.jpg","webpack:///./src/components/common/Home.js","webpack:///./src/components/common/LoginForm.js","webpack:///./src/components/common/Login.js","webpack:///./src/components/common/NotFound.js","webpack:///./src/components/ui/PageLoader.js","webpack:///./src/router/AppRoute.js","webpack:///./src/router/index.js","webpack:///./src/components/App.js","webpack:///./src/index.js"],"names":["getStyledProps","path","props","lodash_get__WEBPACK_IMPORTED_MODULE_1___default","getPadding","num","arguments","length","undefined","defaultPadding","concat","theme","createMuiTheme","typography","useNextVariants","GlobalStyle","createGlobalStyle","_templateObject","reset","size","module","exports","__webpack_require__","p","Wrapper","styled","div","withConfig","displayName","componentId","GET_ME","gql","Home","Component","react_default","a","createElement","react_apollo_browser_umd","query","_ref","loading","error","data","console","log","getMe","SIGN_IN","LoginForm_templateObject","Paper","Title","Typography","Form","form","TextField","FormControl","SubmitButtonWrapper","CircularProgress","BrandIconContainer","BrandIconButton","Fab","BrandIcon","brandColor","_ref2","rgba","formConfig","signin","name","label","type","placeholder","autocomplete","required","initial","formValidationSchemas","yup","shape","transform_default","res","_ref3","min","max","formInitialValues","val","key","field","_ref4","brandIcons","id","color","iconElement","faFacebook","faGoogle","process","LoginForm","_this","LoginForm_classCallCheck","this","LoginForm_getPrototypeOf","call","LoginForm_defineProperty","LoginForm_assertThisInitialized","setState","_ref5","showPassword","_ref6","token","refreshToken","history","localStorage","setItem","push","social","response","state","formId","initialValues","formFields","formValidationSchema","_this2","mutation","update","cache","_ref7","signIn","signInConfirmed","_ref8","LoginForm_Wrapper","elevation","variant","align","gutterBottom","AccountCircleRounded_default","fontSize","formik_esm","validationSchema","onSubmit","_ref9","username","password","variables","render","_ref10","values","errors","touched","handleChange","handleBlur","handleSubmit","event","preventDefault","map_default","_ref11","isError","isPasswordField","verifiedType","fullWidth","InputLabel_default","htmlFor","Input_default","value","onChange","onBlur","autoComplete","endAdornment","InputAdornment_default","position","IconButton_default","onClick","toggleShowPassword","VisibilityRounded_default","VisibilityOffRounded_default","FormHelperText_default","Button_default","disabled","CircularProgress_default","signUp","_ref12","brand","google_login_default","scope","uxMode","redirectUri","clientId","cookie_policy","onSuccess","socialSignInResponse","onFailure","_ref13","isProcessing","index_es","icon","facebook_login_render_props_default","appId","autoLoad","callback","_ref14","signInBySocial","withRouter","Grid","backgrounds","bgImage","Login","Login_Wrapper","ref","createRef","justify","alignItems","container","common_LoginForm","NotFound","NotFound_Wrapper","PageLoader","PageLoader_Wrapper","AppRoute","component","Layout","layout","privateRoute","rest","_objectWithoutProperties","Route","_extends","getItem","Redirect","to","react","LoginLayout","Loadable","loader","e","then","bind","ChatLayout","Routes","Switch","router_AppRoute","exact","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__","styled_components__WEBPACK_IMPORTED_MODULE_3__","_router__WEBPACK_IMPORTED_MODULE_4__","_styles__WEBPACK_IMPORTED_MODULE_5__","hot","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","react_dom__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","react_apollo__WEBPACK_IMPORTED_MODULE_4__","apollo_client__WEBPACK_IMPORTED_MODULE_5__","apollo_link_http__WEBPACK_IMPORTED_MODULE_6__","apollo_link__WEBPACK_IMPORTED_MODULE_7__","apollo_link_error__WEBPACK_IMPORTED_MODULE_8__","apollo_cache_inmemory__WEBPACK_IMPORTED_MODULE_9__","_components_App__WEBPACK_IMPORTED_MODULE_10__","httpLink","createHttpLink","uri","authLink","ApolloLink","operation","forward","setContext","headers","x-token","x-refresh-token","tokenLink","map","getContext","get","errorLink","onError","_ref$networkError","networkError","graphQLErrors","logger","operationName","result","client","ApolloClient","link","from","credentials","InMemoryCache","App","document","getElementById"],"mappings":"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","file":"app.d872c924807d83806a2c.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport reset from 'styled-reset';\r\nimport { size } from 'polished';\r\nimport { get } from 'lodash';\r\n\r\nexport const getStyledProps = path => props => get(props, path);\r\nexport const getPadding = (num = 1) => (props) => {\r\n  const defaultPadding = getStyledProps('theme.spacing.unit')(props);\r\n  const padding = defaultPadding * num;\r\n\r\n  return `${padding}px`;\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n});\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${reset}\r\n\r\n  html,\r\n  body {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    min-height: 100%;\r\n    font-family: ${getStyledProps('theme.typography.fontFamily')};\r\n    font-size: ${getStyledProps('theme.typography.fontSize')}px;\r\n    font-weight: ${getStyledProps('theme.typography.fontWeightRegular')};\r\n    color: #000;\r\n    background-color: #fff;\r\n    overflow-y: auto;\r\n\r\n    #root {\r\n      ${size('inherit')};\r\n      display: flex;\r\n    }\r\n  }\r\n`;\r\n","module.exports = __webpack_public_path__ + \"assets/images/login-bg.jpg\";","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1 auto;\r\n`;\r\n\r\nconst GET_ME = gql`\r\n  query GetMe {\r\n    getMe {\r\n      username\r\n      email\r\n      displayName\r\n      firstName\r\n      lastName\r\n      birthday\r\n      gender\r\n      status\r\n      lastDate\r\n    }\r\n  }\r\n`;\r\n\r\nclass Home extends Component {\r\n  state = {}\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Query query={GET_ME}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return 'Loading...';\r\n            if (error) {\r\n              return 'Error...';\r\n            }\r\n            console.log(data.getMe);\r\n\r\n            return 'Home';\r\n          }}\r\n        </Query>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router';\r\nimport { Mutation } from 'react-apollo';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport GoogleLogin from 'react-google-login';\r\nimport gql from 'graphql-tag';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport styled from 'styled-components';\r\nimport { position, rgba } from 'polished';\r\nimport { map, transform } from 'lodash';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport VisibilityIcon from '@material-ui/icons/VisibilityRounded';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOffRounded';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFacebook, faGoogle, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\n// import Notification from './Notification';\r\n\r\nimport { getStyledProps, getPadding } from '../../styles';\r\n\r\nconst SIGN_IN = gql`\r\n  mutation SignIn($username: String!, $password: String!) {\r\n    signIn(username: $username, password: $password) {\r\n      token\r\n      refreshToken\r\n    }\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled(Paper)`\r\n  && {\r\n    width: 100%;\r\n    max-width: 375px;\r\n    min-width: 320px;\r\n    padding: ${getPadding(5)} ${getPadding(3)};\r\n  }\r\n`;\r\n\r\nconst Title = styled(Typography)`\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: center;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst TextField = styled(FormControl)`\r\n  && {\r\n    margin-bottom: 1em;\r\n  }\r\n`;\r\n\r\nconst CircularProgressIcon = styled(CircularProgress)`\r\n  display: block;\r\n`;\r\n\r\nconst SubmitButtonWrapper = styled.div`\r\n  position: relative;\r\n  margin-top: 1em;\r\n`;\r\n\r\nconst BrandIconContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  margin-top: 3em;\r\n`;\r\n\r\nconst BrandIconButton = styled(Fab)`\r\n  && {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst BrandIcon = styled.div`\r\n  display: inline-flex;\r\n\r\n  :not(:last-child) {\r\n    margin-right: 2em;\r\n  }\r\n\r\n  ${BrandIconButton} {\r\n    background-color: ${({ brandColor }) => brandColor};\r\n\r\n    :hover {\r\n      background-color: ${({ brandColor }) => rgba(brandColor, 0.8)};\r\n    }\r\n  }\r\n`;\r\n\r\nconst formConfig = {\r\n  signin: [{\r\n    name: 'username',\r\n    label: 'Username',\r\n    type: 'text',\r\n    placeholder: 'username or email',\r\n    autocomplete: 'on',\r\n    required: true,\r\n    initial: '',\r\n  }, {\r\n    name: 'password',\r\n    label: 'Password',\r\n    type: 'password',\r\n    placeholder: '******',\r\n    autocomplete: 'on',\r\n    required: true,\r\n    initial: '',\r\n  }],\r\n};\r\n\r\nconst formValidationSchemas = {\r\n  signin: yup.object().shape(transform(formConfig.signin, (res, { name }) => {\r\n    // eslint-disable-next-line\r\n    switch (name) {\r\n      case 'username': {\r\n        res[name] = yup.string().required('*required');\r\n        break;\r\n      }\r\n      case 'password': {\r\n        res[name] = yup.string()\r\n          .min(6)\r\n          .max(20)\r\n          .required('*required');\r\n        break;\r\n      }\r\n    }\r\n  }), {}),\r\n};\r\n\r\nconst formInitialValues = transform(formConfig, (form, val, key) => {\r\n  form[key] = transform(val, (field, { name, initial }) => {\r\n    field[name] = initial;\r\n  }, {});\r\n}, {});\r\n\r\nconst brandIcons = [\r\n  {\r\n    id: 'facebook',\r\n    color: '#3232ff',\r\n    iconElement: faFacebook,\r\n  },\r\n  {\r\n    id: 'google',\r\n    color: '#ff3232',\r\n    iconElement: faGoogle,\r\n  },\r\n];\r\nconsole.log(process.env.GOOGLE_APP_ID);\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showPassword: false,\r\n    };\r\n\r\n    this.formId = 'signin';\r\n    this.initialValues = formInitialValues[this.formId];\r\n    this.formFields = formConfig[this.formId];\r\n    this.formValidationSchema = formValidationSchemas[this.formId];\r\n  }\r\n\r\n  toggleShowPassword = () => {\r\n    this.setState(({ showPassword }) => ({ showPassword: !showPassword }));\r\n  }\r\n\r\n  signInConfirmed = ({ token, refreshToken }) => {\r\n    const { history } = this.props;\r\n\r\n    localStorage.setItem('chatkilla_tkn', token);\r\n    localStorage.setItem('chatkilla_rfrsh_tkn', refreshToken);\r\n\r\n    history.push('/');\r\n  }\r\n\r\n  signUp = () => {\r\n    const { history } = this.props;\r\n\r\n    history.push('/login/new');\r\n  }\r\n\r\n  socialSignInResponse = (social, response) => {\r\n    console.log(response);\r\n  }\r\n\r\n  render() {\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <Mutation\r\n        mutation={SIGN_IN}\r\n        update={(cache, { data: { signIn } }) => {\r\n          this.signInConfirmed(signIn);\r\n        }}\r\n      >\r\n        {(signIn, { loading }) => {\r\n          return (\r\n            <Wrapper elevation={8}>\r\n              <Title\r\n                color=\"primary\"\r\n                variant=\"h1\"\r\n                align=\"center\"\r\n                gutterBottom\r\n              >\r\n                <AccountCircleIcon fontSize=\"inherit\" color=\"primary\" />\r\n              </Title>\r\n              <Formik\r\n                initialValues={this.initialValues}\r\n                validationSchema={this.formValidationSchema}\r\n                onSubmit={({ username, password }) => {\r\n                  signIn({ variables: { username, password } });\r\n                }}\r\n                render={({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                }) => {\r\n                  return (\r\n                    <Form onSubmit={(event) => { event.preventDefault(); }}>\r\n                      {\r\n                        map(this.formFields, ({\r\n                          name,\r\n                          label,\r\n                          type,\r\n                          placeholder,\r\n                          autocomplete,\r\n                          required,\r\n                        }) => {\r\n                          const isError = errors[name] && touched[name];\r\n                          const isPasswordField = type === 'password';\r\n                          const error = errors[name];\r\n                          const verifiedType = (isPasswordField && showPassword)\r\n                            ? 'text'\r\n                            : type;\r\n\r\n                          return (\r\n                            <TextField key={name} fullWidth>\r\n                              <InputLabel htmlFor={name}>{label}</InputLabel>\r\n                              <Input\r\n                                id={name}\r\n                                type={verifiedType}\r\n                                value={values[name]}\r\n                                error={errors[name] && touched[name]}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                placeholder={placeholder}\r\n                                required={required}\r\n                                autoComplete={autocomplete}\r\n                                endAdornment={(\r\n                                  <Choose>\r\n                                    <When condition={isPasswordField}>\r\n                                      <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={this.toggleShowPassword}>\r\n                                          <Choose>\r\n                                            <When condition={showPassword}>\r\n                                              <VisibilityIcon />\r\n                                            </When>\r\n                                            <Otherwise>\r\n                                              <VisibilityOffIcon />\r\n                                            </Otherwise>\r\n                                          </Choose>\r\n                                        </IconButton>\r\n                                      </InputAdornment>\r\n                                    </When>\r\n                                    <Otherwise>{null}</Otherwise>\r\n                                  </Choose>\r\n                                )}\r\n                              />\r\n                              <If condition={isError}>\r\n                                <FormHelperText error={isError}>{error}</FormHelperText>\r\n                              </If>\r\n                            </TextField>\r\n                          );\r\n                        })\r\n                      }\r\n                      <SubmitButtonWrapper>\r\n                        <Button\r\n                          color=\"primary\"\r\n                          size=\"large\"\r\n                          variant=\"contained\"\r\n                          onClick={handleSubmit}\r\n                          disabled={loading}\r\n                          fullWidth\r\n                        >\r\n                          <Choose>\r\n                            <When condition={loading}>\r\n                              <CircularProgress size={26} />\r\n                            </When>\r\n                            <Otherwise>\r\n                              {'Sign In'}\r\n                            </Otherwise>\r\n                          </Choose>\r\n                        </Button>\r\n                      </SubmitButtonWrapper>\r\n                      <SubmitButtonWrapper>\r\n                        <Button\r\n                          onClick={this.signUp}\r\n                          color=\"primary\"\r\n                          size=\"large\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                        >\r\n                          {'Sign Up'}\r\n                        </Button>\r\n                      </SubmitButtonWrapper>\r\n                      <BrandIconContainer>\r\n                        {\r\n                          map(brandIcons, ({ id, color, iconElement }) => (\r\n                            <BrandIcon\r\n                              key={id}\r\n                              brand={id}\r\n                              brandColor={color}\r\n                            >\r\n                              <Choose>\r\n                                <When condition={id === 'google'}>\r\n                                  <GoogleLogin\r\n                                    scope=\"email profile\"\r\n                                    uxMode=\"redirect\"\r\n                                    redirectUri=\"http://localhost:3000/api/passport/google/auth\"\r\n                                    clientId={process.env.GOOGLE_APP_ID}\r\n                                    cookie_policy=\"single_host_origin\"\r\n                                    onSuccess={response => this.socialSignInResponse(id, response)}\r\n                                    onFailure={response => this.socialSignInResponse(id, response)}\r\n                                    render={({ onClick, isProcessing }) => (\r\n                                      <BrandIconButton disabled={isProcessing} size=\"large\" onClick={onClick}>\r\n                                        <FontAwesomeIcon icon={iconElement} size=\"lg\" />\r\n                                      </BrandIconButton>\r\n                                    )}\r\n                                  />\r\n                                </When>\r\n                                <When condition={id === 'facebook'}>\r\n                                  <FacebookLogin\r\n                                    appId={process.env.FACEBOOK_APP_ID}\r\n                                    autoLoad\r\n                                    callback={response => this.socialSignInResponse(id, response)}\r\n                                    render={({ onClick, isProcessing }) => (\r\n                                      <BrandIconButton disabled={isProcessing} size=\"large\" onClick={onClick}>\r\n                                        <FontAwesomeIcon icon={iconElement} size=\"lg\" />\r\n                                      </BrandIconButton>\r\n                                    )}\r\n                                  />\r\n                                </When>\r\n                                <Otherwise>\r\n                                  <BrandIconButton size=\"large\" onClick={() => this.signInBySocial(id)}>\r\n                                    <FontAwesomeIcon icon={iconElement} size=\"lg\" />\r\n                                  </BrandIconButton>\r\n                                </Otherwise>\r\n                              </Choose>\r\n                            </BrandIcon>\r\n                          ))\r\n                        }\r\n                      </BrandIconContainer>\r\n                    </Form>\r\n                  );\r\n                }}\r\n              />\r\n              {/* <Notification open={!!error} type=\"warning\" /> */}\r\n            </Wrapper>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LoginForm);\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport styled from 'styled-components';\r\nimport { backgrounds } from 'polished';\r\n\r\nimport LoginForm from './LoginForm';\r\nimport bgImage from '../../assets/images/login-bg.jpg';\r\n\r\nconst Wrapper = styled(Grid)`\r\n  flex: 1 auto;\r\n  ${backgrounds(`url(${bgImage})`, 'center no-repeat')}\r\n  background-size: cover;\r\n`;\r\n\r\nclass Login extends Component {\r\n  render() {\r\n    return (\r\n      <Wrapper\r\n        ref={this.createRef}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        container\r\n      >\r\n        <LoginForm />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { size } from 'polished';\r\n\r\nconst Wrapper = styled.div`\r\n  ${size('100%')}\r\n  text-align: center;\r\n`;\r\n\r\nconst NotFound = () => (\r\n  <Wrapper>404! Page not found!</Wrapper>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport styled from 'styled-components';\r\nimport { position } from 'polished';\r\n\r\nconst Wrapper = styled.div`\r\n  ${position('absolute', '50%', null, null, '50%')}\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\nconst PageLoader = () => (\r\n  <Wrapper>\r\n    <CircularProgress size={80} />\r\n  </Wrapper>\r\n);\r\n\r\nexport default PageLoader;\r\n","import React, { Fragment } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst AppRoute = ({\r\n  component: Component,\r\n  layout: Layout,\r\n  privateRoute,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props => (\r\n      <Choose>\r\n        <When condition={privateRoute && !localStorage.getItem('chatkilla_tkn')}>\r\n          <Redirect to=\"login\" />\r\n        </When>\r\n        <When condition={!Layout}>\r\n          <Fragment>\r\n            <Component {...props} />\r\n          </Fragment>\r\n        </When>\r\n        <Otherwise>\r\n          <Layout>\r\n            <Component {...props} />\r\n          </Layout>\r\n        </Otherwise>\r\n      </Choose>\r\n    )}\r\n  />\r\n);\r\n\r\nexport default AppRoute;\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\nimport Loadable from 'react-loadable';\r\n\r\n// import LoginLayout from '../components/layouts/LoginLayout';\r\n// import ChatLayout from '../components/layouts/ChatLayout';\r\n\r\nimport Home from '../components/common/Home';\r\nimport Login from '../components/common/Login';\r\nimport NotFound from '../components/common/NotFound';\r\nimport PageLoader from '../components/ui/PageLoader';\r\n\r\nimport AppRoute from './AppRoute';\r\n\r\nconst LoginLayout = Loadable({\r\n  loader: () => import('../components/layouts/LoginLayout'),\r\n  loading: PageLoader,\r\n});\r\n\r\nconst ChatLayout = Loadable({\r\n  loader: () => import('../components/layouts/ChatLayout'),\r\n  loading: PageLoader,\r\n});\r\n\r\n// const NotFound = Loadable({\r\n//   loader: () => import('../components/common/NotFound'),\r\n//   loading: PageLoader,\r\n// });\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <AppRoute exact path=\"/login\" layout={LoginLayout} component={Login} />\r\n    <AppRoute exact path=\"/\" layout={ChatLayout} component={Home} privateRoute />\r\n    <AppRoute component={NotFound} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { Fragment } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport Router from '../router';\r\nimport { GlobalStyle, theme } from '../styles';\r\n\r\nconst App = () => {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <ThemeProvider theme={theme}>\r\n        <Fragment>\r\n          <GlobalStyle />\r\n          <Router />\r\n        </Fragment>\r\n      </ThemeProvider>\r\n    </MuiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default hot(module)(App);\r\n","import 'whatwg-fetch';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloLink, from } from 'apollo-link';\r\nimport { onError } from 'apollo-link-error';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n// import registerServiceWorker from './registerServiceWorker';\r\n\r\nimport App from './components/App';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:3000/api/graphql',\r\n});\r\n\r\nconst authLink = new ApolloLink((operation, forward) => {\r\n  operation.setContext({\r\n    headers: {\r\n      'x-token': localStorage.getItem('chatkilla_tkn') || null,\r\n      'x-refresh-token': localStorage.getItem('chatkilla_rfrsh_tkn') || null,\r\n    },\r\n  });\r\n  return forward(operation);\r\n});\r\n\r\nconst tokenLink = new ApolloLink((operation, forward) => {\r\n  return forward(operation).map((response) => {\r\n    const { response: { headers } } = operation.getContext();\r\n    console.log(response);\r\n\r\n    if (headers) {\r\n      const token = headers.get('x-token');\r\n      const refreshToken = headers.get('x-refresh-token');\r\n\r\n      if (token && refreshToken) {\r\n        localStorage.setItem('chatkilla_tkn', token);\r\n        localStorage.setItem('chatkilla_rfrsh_tkn', refreshToken);\r\n      }\r\n    }\r\n    return response;\r\n  });\r\n});\r\n\r\nconst errorLink = onError(({ networkError = {}, graphQLErrors }) => {\r\n  console.log('networkerrors', networkError);\r\n  console.log('error', graphQLErrors);\r\n});\r\n\r\nconst logger = new ApolloLink((operation, forward) => {\r\n  console.log(`operation: ${operation.operationName}`, operation);\r\n  return forward(operation).map((result) => {\r\n    console.log(`Result from ${operation.operationName}:`, result);\r\n    return result;\r\n  })\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: from([\r\n    errorLink,\r\n    tokenLink,\r\n    authLink,\r\n    logger,\r\n    httpLink,\r\n  ]),\r\n  credentials: 'include',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst renderApp = (Component) => {\r\n  render(\r\n    <ApolloProvider client={client}>\r\n      <BrowserRouter>\r\n        <Component />\r\n      </BrowserRouter>\r\n    </ApolloProvider>, document.getElementById('root'),\r\n  );\r\n};\r\n\r\nrenderApp(App);\r\n// registerServiceWorker();\r\n"],"sourceRoot":""}