enum Status {
  OFFLINE
  ONLINE
}

enum regStatus {
  EMAIL_UNCONFIRMED
  UNCOMPLETED
  COMPLETED
}

type UserFriend {
  id: ID!
  name: String
}

type UserSocial {
  id: ID!
  email: String
}

type UserSocials {
  google: UserSocial
  facebook: UserSocial
  github: UserSocial
}

type User {
  isAdmin: Boolean!
  id: ID!
  username: String!
  email: String!
  displayName: String
  firstName: String
  lastName: String
  gender: String
  birthday: Date
  status: Status
  createDate: Date!
  lastDate: Date!
  refreshToken: String
  regStatus: regStatus
  friends: [UserFriend]
  socials: UserSocials
}

type AuthPayload {
  token: String
  refreshToken: String
}

input SignUpForm {
  username: String!
  email: String!
  password: String!
}

input SignUpCompletionForm {
  firstName: String!
  lastName: String!
  gender: String!
}

input SocialProfile {
  id: ID!
  email: String
}

type AsyncValidationResult {
  field: String!
  valid: Boolean!
}

type Query {
  getUser(id: ID!): User
  getUsers: [User]
  getMe: User
}

type Mutation {
  signIn(username: String!, password: String!): AuthPayload
  signInBySocial(social: String!, profile: SocialProfile!): AuthPayload
  signUp(form: SignUpForm!): Boolean
  signUpCompletion(id: ID!, form: SignUpCompletionForm): AuthPayload
  signUpAsyncValidation(field: String!, value: String!): AsyncValidationResult
  signOut(id: ID!): User
  deleteUser(id: ID!): User
}
